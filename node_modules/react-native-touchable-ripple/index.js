/* @flow */

import * as React from 'react';
import {
  TouchableNativeFeedback,
  TouchableHighlight,
  TouchableWithoutFeedback,
  Platform,
  View,
} from 'react-native';
import color from 'color';

const ANDROID_VERSION_LOLLIPOP = 21;
const ANDROID_VERSION_PIE = 28;

type Props = React.ElementConfig<typeof TouchableWithoutFeedback> & {|
  borderless?: boolean,
  waitForAnimation?: boolean,
  background?: Object,
  disabled?: boolean,
  onPress?: ?() => mixed,
  rippleColor?: string,
  underlayColor?: string,
  children: React.Node,
  style?: any,
  theme?: string,
|};

class TouchableRipple extends React.Component<Props, void> {
  static defaultProps = {
    borderless: false,
    waitForAnimation: true,
  };

  static supported =
    Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;

  onPress = () => {
    if (this.props.waitForAnimation) {
      requestAnimationFrame(() => this.props.onPress());
    } else {
      this.props.onPress();
    }
  }
  render() {
    const {
      style,
      background,
      borderless,
      rippleColor,
      underlayColor,
      children,
      theme,
      ...rest
    } = this.props;

    const disabled = !this.props.onPress;
    const calculatedRippleColor =
      rippleColor ||
      color(theme == 'dark' ? '#ccc' : '#333')
        .alpha(theme == 'dark' ? 0.32 : 0.2)
        .rgb()
        .string();

    // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'
    // https://github.com/facebook/react-native/issues/6480
    const useForeground =
      Platform.OS === 'android' &&
      Platform.Version >= ANDROID_VERSION_PIE &&
      borderless;

    if (TouchableRipple.supported) {
      return (
        <TouchableNativeFeedback
          {...rest}
          delayPressIn={0}
          disabled={disabled}
          background={
            background != null
              ? background
              : TouchableNativeFeedback.Ripple(
                  calculatedRippleColor,
                  borderless
                )
          }
          onPress={this.onPress}
        >
          <View style={[borderless && { overflow: 'hidden' }, style]}>
            {React.Children.only(children)}
          </View>
        </TouchableNativeFeedback>
      );
    }

    return (
      <TouchableHighlight
        {...rest}
        disabled={disabled}
        style={[borderless && { overflow: 'hidden' }, style]}
        underlayColor={
          underlayColor != null
            ? underlayColor
            : color(calculatedRippleColor)
                .fade(0.5)
                .rgb()
                .string()
        }
      >
        {React.Children.only(children)}
      </TouchableHighlight>
    );
  }
}

export default TouchableRipple;
